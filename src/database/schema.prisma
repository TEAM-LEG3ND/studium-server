generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Study {
  id               Int         @id @default(autoincrement())
  leaderId         Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  intro            String
  rules            String[]
  location         Location
  locationDetail   String
  status           StudyStatus @default(RECRUITING)
  endDate          DateTime
  recruitEndDate   DateTime
  recruitStartDate DateTime
  startDate        DateTime
  name             String
  recruited        Int
  total            Int
  templateContent  String
  viewCount        Int         @default(0)
  member           Member[]
  leader           User        @relation(fields: [leaderId], references: [id])
  tags             Tag[]       @relation("StudyToTag")
  questions        Question[]
  applyForms       ApplyForm[]
  notices          Notice[]
}

model User {
  id                 Int         @id @default(autoincrement())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  nickname           String      @unique
  universalAccountId String      @unique
  manners            Int
  intro              String
  profileURL         String
  applyForms         ApplyForm[]
  membersOf          Member[]
  studyJoined        Study[]
}

model Member {
  id      Int          @id @default(autoincrement())
  studyId Int
  userId  Int
  status  MemberStatus @default(PENDING)
  type    MemberType   @default(MEMBER)
  study   Study        @relation(fields: [studyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  studys Study[] @relation("StudyToTag")
}

model ApplyForm {
  id         Int         @id @default(autoincrement())
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  study      Study       @relation(fields: [studyId], references: [id])
  studyId    Int
  user       User        @relation(fields: [userId], references: [id])
  answers    Answer[]
  timeFrames TimeFrame[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  study   Study    @relation(fields: [studyId], references: [id])
  studyId Int
  Answer  Answer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  text        String
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  applyForm   ApplyForm @relation(fields: [applyFormId], references: [id])
  applyFormId Int
}

model TimeFrame {
  id          Int       @id @default(autoincrement())
  start       DateTime
  end         DateTime
  applyForm   ApplyForm @relation(fields: [applyFormId], references: [id])
  applyFormId Int
}

model Notice {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String
  studyId     Int
  study       Study     @relation(fields: [studyId], references: [id])
}

enum StudyStatus {
  INACTIVE
  RECRUITING
  ACTIVE
  EVALUATION
}

enum MemberStatus {
  PENDING
  ACTIVE
  COMPLETE
}

enum MemberType {
  LEADER
  MEMBER
}

enum Location {
  ONLINE
  OFFLINE
}
