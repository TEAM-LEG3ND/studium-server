generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Study {
  id               Int         @id @default(autoincrement())
  leaderId         Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  intro            String
  rules            String[]
  location         String
  status           StudyStatus @default(RECRUITING)
  endDate          DateTime
  recruitEndDate   DateTime
  recruitStartDate DateTime
  startDate        DateTime
  name             String
  questionnaire    Json
  recruited        Int
  recruiting       Int
  studyTemplate    String
  title            String
  applyForms       ApplyForm[]
  member           Member[]
  leader           User        @relation(fields: [leaderId], references: [id])
  tags             Tag[]       @relation("StudyToTag")
}

model User {
  id                 Int         @id @default(autoincrement())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  universalAccountId Int         @unique
  manners            Int
  intro              String
  profileURL         String
  applyForms         ApplyForm[]
  membersOf          Member[]
  studyJoined        Study[]
}

model Member {
  id      Int          @id @default(autoincrement())
  studyId Int
  userId  Int
  status  MemberStatus @default(PENDING)
  type    MemberType   @default(MEMBER)
  study   Study        @relation(fields: [studyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  studys Study[] @relation("StudyToTag")
}

model ApplyForm {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    Json
  studyId   Int
  study     Study    @relation(fields: [studyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum StudyStatus {
  INACTIVE
  RECRUITING
  ACTIVE
  EVALUATION
}

enum MemberStatus {
  PENDING
  ACTIVE
  COMPLETE
}

enum MemberType {
  LEADER
  MEMBER
}
